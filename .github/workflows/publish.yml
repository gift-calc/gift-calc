name: Publish to NPM

on:
  push:
    branches: [ master ]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write  # Required for npm provenance
      actions: write   # Required to bypass branch protection
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for semantic-release
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for checkout
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run semantic-release
        id: semantic
        run: |
          echo "üöÄ Running semantic-release..."
          # Configure git for semantic-release
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Set remote URL with token for authenticated pushes
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/gift-calc/gift-calc.git
          
          # Run semantic-release
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Get release info
        if: always()  # Run even if semantic-release doesn't publish
        id: release_info
        run: |
          # Check if a new version was published by looking for the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ "$LATEST_TAG" != "$PREVIOUS_TAG" ] && [ -n "$LATEST_TAG" ]; then
            echo "published=true" >> $GITHUB_OUTPUT
            NEW_VERSION=${LATEST_TAG#v}  # Remove 'v' prefix if present
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "üéâ New version published: $NEW_VERSION"
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No new version published"
          fi
          
          # Check if files affecting website demo changed (regardless of version)
          DEMO_FILES_CHANGED=$(git diff HEAD~1 --name-only | grep -E '^(index\.js|src/|package\.json)' || true)
          if [ -n "$DEMO_FILES_CHANGED" ]; then
            echo "core-changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Demo-affecting files changed, will sync to website:"
            echo "$DEMO_FILES_CHANGED"
          else
            echo "core-changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No demo-affecting files changed"
          fi
          
      - name: Build web bundle
        if: steps.release_info.outputs.core-changed == 'true'
        run: |
          echo "üåê Building web bundle..."
          if [ -f src/core-web.js ]; then
            cp src/core-web.js src/core-bundle.js
            echo "‚úÖ Web bundle created from src/core-web.js"
          else
            echo "‚ö†Ô∏è src/core-web.js not found, skipping web bundle creation"
          fi
          
      - name: Update Homebrew formula
        if: steps.release_info.outputs.published == 'true'
        run: |
          echo "üç∫ Updating Homebrew formula..."
          NEW_VERSION="${{ steps.release_info.outputs.version }}"
          echo "üîÑ Triggering Homebrew update for version $NEW_VERSION"
          
          RESPONSE=$(curl -w "%{http_code}" -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.HOMEBREW_DISPATCH_TOKEN }}" \
            https://api.github.com/repos/gift-calc/homebrew-gift-calc/dispatches \
            -d "{\"event_type\":\"version_update\",\"client_payload\":{\"version\":\"$NEW_VERSION\"}}")
          
          if [ "$RESPONSE" -eq "204" ]; then
            echo "‚úÖ Homebrew update triggered successfully"
          else
            echo "‚ö†Ô∏è Homebrew update request returned status: $RESPONSE"
          fi
          
      - name: Set up Docker Buildx
        if: steps.release_info.outputs.published == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: steps.release_info.outputs.published == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract Docker metadata
        if: steps.release_info.outputs.published == 'true'
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: david/gift-calc
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        if: steps.release_info.outputs.published == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          provenance: true
          
      - name: Docker publish status
        if: steps.release_info.outputs.published == 'true' && failure()
        run: echo "‚ö†Ô∏è Docker publish failed but npm release succeeded"
          
      - name: Trigger website update
        if: steps.release_info.outputs.core-changed == 'true'
        run: |
          echo "üåç Triggering website update..."
          
          # Get current version from package.json  
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "üì¶ Current version: $CURRENT_VERSION"
          
          RESPONSE=$(curl -w "%{http_code}" -s -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.WEBSITE_DISPATCH_TOKEN }}" \
            https://api.github.com/repos/gift-calc/gift-calc.github.io/dispatches \
            -d "{\"event_type\":\"website_sync\",\"client_payload\":{\"version\":\"$CURRENT_VERSION\"}}")
          
          if [ "$RESPONSE" -eq "204" ]; then
            echo "‚úÖ Website update triggered successfully"
          else
            echo "‚ö†Ô∏è Website update request returned status: $RESPONSE"
          fi